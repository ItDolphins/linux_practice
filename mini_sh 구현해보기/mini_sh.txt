#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>

#define FALSE 0
#define TRUE 1

#define EOL	1
#define ARG	2
#define AMPERSAND 3

#define FOREGROUND 0
#define BACKGROUND 1

static char	input[512];
static char	tokens[1024];
char *ptr, *tok; //prt에는 명령어가 저장

int get_token(char **outptr) //명령어를 토큰으로 끊어주는 함수
{
	int	type;

	*outptr = tok;
	while ((*ptr == ' ') || (*ptr == '\t')) ptr++;
	//공백일 떄는 ptr포인터 이동
	*tok++ = *ptr;  //tok포인터에 ptr이 가르키는 문자 저장

	switch (*ptr++) {
	case '\0': type = EOL; break;
	case '&': type = AMPERSAND; break;
	default: type = ARG; //그냥 문자인 경우
		while ((*ptr != ' ') && (*ptr != '&') &&
			(*ptr != '\t') && (*ptr != '\0'))
			*tok++ = *ptr++;
		//공백 , &, \t. \0이 나올떄까지 포인터 이동하면서 tok에 저장
	}
	*tok++ = '\0'; //문자열의 마지막에 \0삽입
	return(type);
}

int execute(char **comm, int how)
{
	int	pid;
	int fd;
	int fd_pipe[2]; //파이프 구현을 위한 변수
	int pid1, pid2; //파이프 구현을 위한 변수
	int status; //파이프 함수가 잘 작동했는지 저장하는 상태변수

	if ((pid = fork()) < 0) {
		fprintf(stderr, "minish : fork error\n");
		return(-1);
	}
	else if (pid == 0) {
		if (!strcmp(comm[1], ">")) {
			fd = open(comm[2], O_RDWR | O_CREAT | S_IROTH, 0644);
			if (fd < 0) {
				perror("error");
				exit(-1);
			}
			dup2(fd, STDOUT_FILENO);
			close(fd);
			execlp(comm[0], comm[0], (char*)0);
		}
		else if (!strcmp(comm[1], "<")) {
			fd = open(comm[2], O_RDONLY);
			if (fd < 0) {
				perror("error");
				exit(-1);
			}
			dup2(fd, STDIN_FILENO);
			close(fd);
			execlp(comm[0], comm[0], (char*)0);
		}
		else if (!strcmp(comm[1], "|")) {
			status = pipe(fd_pipe);
			if (status == -1) {
				perror("pipe error");
				exit(-1);
			}
			pid1 = fork();
			if (pid1 == 0) { //first child
				dup2(fd_pipe[1], STDOUT_FILENO);
				close(fd_pipe[0]);
				close(fd_pipe[1]);
				execlp(comm[0], comm[0], (char*)0);
			}

			pid2 = fork();
			if (pid2 == 0) {
				dup2(fd_pipe[0], STDIN_FILENO);
				close(fd_pipe[0]);
				close(fd_pipe[1]);
				execlp(comm[2], comm[2], (char*)0);
			}
		}

		fprintf(stderr, "minish : command not found\n");
		exit(127);
	}
	if (how == BACKGROUND) {	/* Background execution */
		printf("[%d]\n", pid);
		return 0;
	}
	/* Foreground execution */
	while (waitpid(pid, NULL, 0) < 0)
		if (errno != EINTR) return -1;
	return 0;
}

int parse_and_execute(char *input)
{
	char *arg[1024];
	int	type, how;
	int	quit = FALSE;
	int	narg = 0;
	int	finished = FALSE;

	ptr = input; //전역변수 ptr에 명령어 저장
	tok = tokens; //tok포인터가 tokens를 가르키도록
	while (!finished) {
		switch (type = get_token(&arg[narg])) {
		case ARG:
			narg++;
			break;
			//arg[narg]에서 narg를 이동시켜가며 토큰을 배열에 저장
		case EOL:
		case AMPERSAND:
			if (!strcmp(arg[0], "quit")) quit = TRUE;
			else if (!strcmp(arg[0], "exit")) quit = TRUE;
			else if (!strcmp(arg[0], "cd")) {
				//do something
			}
			else if (!strcmp(arg[0], "type")) {
				//텍스트 파일을 읽어서 쉘 창에 띄우는 명령어 구현
				if (narg > 1) {
					int	i, fid;
					int	readcount;
					char	buf[512];
					if ((fid = open(arg[1], O_RDONLY)) < 0) {
						perror("open error");
						exit(-1);
					}
					else {
						readcount = read(fid, buf, 512);
						while (readcount > 0) {
							for (i = 0; i < readcount; i++)
								putchar(buf[i]);
							readcount = read(fid, buf, 512);
						}
					}
					close(fid);
				}
			}
			else {
				how = (type == AMPERSAND) ? BACKGROUND : FOREGROUND;
				arg[narg] = NULL;
				if (narg != 0)
					execute(arg, how);
			}
			narg = 0;
			if (type == EOL)
				finished = TRUE;
			break;
		}
	}
	return quit;
}



int main()
{
	char *arg[1024];
	int	quit;

	printf("msh # ");
	while (gets(input)) { //quit = TRUE일 때까지 쉘 동작
		quit = parse_and_execute(input);
		if (quit) break;
		printf("msh # ");
	}
}


